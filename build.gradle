import edu.wpi.first.gradlerio.GradleRIOPlugin

buildscript {
    repositories {
        jcenter()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath "org.jlleitschuh.gradle:ktlint-gradle:9.1.1"
    }
}

plugins {
    id "idea"
    id "org.jetbrains.kotlin.jvm" version "1.3.60"
    id "edu.wpi.first.GradleRIO" version "2020.1.1-beta-4" // TODO: change after kickoff release
//    id "edu.wpi.first.GradleRIO" version "2019.4.1"
    id "io.gitlab.arturbosch.detekt" version "1.1.1"
}

sourceCompatibility = JavaVersion.VERSION_11
targetCompatibility = JavaVersion.VERSION_11

def TEAM = 4099
// do not change main class (does not run without it being Main
def ROBOT_MAIN_CLASS = "org.usfirst.frc.team4099.robot.Main"

// Define my targets (RoboRIO) and artifacts (deployable files)
// This is added by GradleRIO's backing project EmbeddedTools.
deploy {
    targets {
        roboRIO("roborio") {
            // Team number is loaded either from the .wpilib/wpilib_preferences.json
            // or from command line. If not found an exception will be thrown.
            // You can use getTeamOrDefault(team) instead of getTeamNumber if you
            // want to store a team number in this file.
            team = TEAM
        }
    }
    artifacts {
        frcJavaArtifact('frcJava') {
            targets << "roborio"
            // Debug can be overridden by command line, for use with VSCode
            debug = frc.getDebugOrDefault(false)
        }
        // Built in artifact to deploy arbitrary files to the roboRIO.
        fileTreeArtifact('frcStaticFileDeploy') {
            // The directory below is the local directory to deploy
            files = fileTree(dir: 'src/main/deploy')
            // Deploy to RoboRIO target, into /home/lvuser/deploy
            targets << "roborio"
            directory = '/home/lvuser/deploy'
        }
    }
}

// Linter configuration
detekt {
    toolVersion = "1.1.1"
    input = files("src/main/kotlin")
    config = files("config/detekt/detekt.yml")
}

repositories {
    mavenCentral()
    jcenter()
    maven { url "https://jitpack.io" }
    maven { url "https://kotlin.bintray.com/kotlinx" }
}

// Defining my dependencies. In this case, WPILib (+ friends)
dependencies {
    compile wpi.deps.wpilib()
    compile wpi.deps.vendor.java()
    nativeZip wpi.deps.vendor.jni(wpi.platforms.roborio)
    nativeDesktopZip wpi.deps.vendor.jni(wpi.platforms.desktop)

    // We need to add the Kotlin stdlib in order to use most Kotlin language features.
    compile "org.jetbrains.kotlin:kotlin-stdlib"

    // HelixLogger and HelixEvents
    compile 'com.github.team4099:HelixUtilities:2020-SNAPSHOT'
    detektPlugins "io.gitlab.arturbosch.detekt:detekt-formatting:1.1.1"
}

// Setting up my Jar File. In this case, adding all libraries into the main jar ('fat jar')
// in order to make them all available at runtime. Also adding the manifest so WPILib
// knows where to look for our Robot Class.
jar {
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    manifest GradleRIOPlugin.javaManifest(ROBOT_MAIN_CLASS)
}

wrapper {
    gradleVersion = '5.6.4'
}